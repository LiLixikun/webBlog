let a = 1;
//暂存死区 不存在变量提升
typeof c //c is not defined
let c = 2;

//const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。
//对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。
//但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心

const foo = {};
foo.pro = 123;
foo.pro; //123
//将foo 指向另一个对象
foo = {} // foo is read-only
//常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。
const arr = [];
arr.push("hello")
arr.length = 0;

arr = ["hello"] //报错

//顶层对象属性

// 顶层对象,在浏览器环境中指的是 window,在 Node中指的是 global
// 在ES5 顶层对象的属性和全局变量是等价的

window.a = "222";
a//"222"

a = 2;
window.a;//2

/**
 * ES6 为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性；
 * 另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。
 * 也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩
 */

var a = 1;
// 如果在 Node 的 REPL 环境，可以写成 global.a
// 或者采用通用方法，写成 this.a
window.a;

let b = 2;
window.b//undefine